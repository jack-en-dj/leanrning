1. 创建头文件 DiskIndexBuilder.h
这个文件会声明 DiskIndexBuilder 类及其用于初始化和构建磁盘索引的方法。
// DiskIndexBuilder.h  
#ifndef DISK_INDEX_BUILDER_H  
#define DISK_INDEX_BUILDER_H  

#include <string>  
#include <cstdint>  
#include <boost/program_options.hpp>  
#include "disk_utils.h"  

namespace diskann {  

class DiskIndexBuilder {  
public:  
    DiskIndexBuilder(int argc, char **argv);  
    int buildIndex();  

private:  
    void setupOptions();  
    void parseCommandLine(int argc, char **argv);  
    bool setMetric();  
    bool validateAppendReorderData();  
    std::string prepareParams();  
    int executeBuild(const std::string& params);  

    // 保存配置的成员变量  
    std::string data_type, dist_fn, data_path, index_path_prefix, codebook_prefix, label_file, universal_label, label_type;  
    uint32_t num_threads, R, L, disk_PQ, build_PQ, QD, Lf, filter_threshold;  
    float B, M;  
    bool append_reorder_data, use_opq;  
    diskann::Metric metric;  
};  

} // namespace diskann  

#endif // DISK_INDEX_BUILDER_H


2. 创建实现文件 DiskIndexBuilder.cpp
这个文件将包含 DiskIndexBuilder 方法的实现。

// DiskIndexBuilder.cpp  
#include "DiskIndexBuilder.h"  
#include <iostream>  
#include <omp.h>  

namespace po = boost::program_options;  

namespace diskann {  

DiskIndexBuilder::DiskIndexBuilder(int argc, char **argv) {  
    // 初始化成员变量默认值  
    num_threads = omp_get_num_procs();  
    R = 64; L = 100; disk_PQ = 0; build_PQ = 0; QD = 0; Lf = 0; filter_threshold = 0;  
    B = 0.0f; M = 0.0f;  
    append_reorder_data = false;  
    use_opq = false;  
    
    // 设置命令行选项  
    setupOptions();  
    parseCommandLine(argc, argv);  
}  

void DiskIndexBuilder::setupOptions() {  
    // 设置程序选项描述  
    po::options_description desc{  
        program_options_utils::make_program_description("build_disk_index", "构建基于磁盘的索引.")};  

    desc.add_options()("help,h", "打印参数信息");  

    // 必要参数  
    po::options_description required_configs("Required");  
    required_configs.add_options()  
        ("data_type", po::value<std::string>(&data_type)->required(), program_options_utils::DATA_TYPE_DESCRIPTION)  
        ("dist_fn", po::value<std::string>(&dist_fn)->required(), program_options_utils::DISTANCE_FUNCTION_DESCRIPTION)  
        ("index_path_prefix", po::value<std::string>(&index_path_prefix)->required(), program_options_utils::INDEX_PATH_PREFIX_DESCRIPTION)  
        ("data_path", po::value<std::string>(&data_path)->required(), program_options_utils::INPUT_DATA_PATH)  
        ("search_DRAM_budget,B", po::value<float>(&B)->required(), "搜索索引的 DRAM 预算（GB）")  
        ("build_DRAM_budget,M", po::value<float>(&M)->required(), "构建索引的 DRAM 预算（GB）");  

    // 可选参数  
    po::options_description optional_configs("Optional");  
    optional_configs.add_options()  
        ("num_threads,T", po::value<uint32_t>(&num_threads)->default_value(num_threads), program_options_utils::NUMBER_THREADS_DESCRIPTION)  
        ("max_degree,R", po::value<uint32_t>(&R)->default_value(R), program_options_utils::MAX_BUILD_DEGREE)  
        ("Lbuild,L", po::value<uint32_t>(&L)->default_value(L), program_options_utils::GRAPH_BUILD_COMPLEXITY)  
        ("QD", po::value<uint32_t>(&QD)->default_value(0), "压缩的量化维度")  
        ("codebook_prefix", po::value<std::string>(&codebook_prefix)->default_value(""), "预训练码本的路径前缀")  
        ("PQ_disk_bytes", po::value<uint32_t>(&disk_PQ)->default_value(0), "要在SSD上压缩到的字节数；为0表示不压缩")  
        ("append_reorder_data", po::bool_switch(&append_reorder_data)->default_value(false), "在索引中包括全精度数据。")  
        ("build_PQ_bytes", po::value<uint32_t>(&build_PQ)->default_value(0), program_options_utils::BUIlD_GRAPH_PQ_BYTES)  
        ("use_opq", po::bool_switch(&use_opq)->default_value(false), program_options_utils::USE_OPQ)  
        ("label_file", po::value<std::string>(&label_file)->default_value(""), program_options_utils::LABEL_FILE)  
        ("universal_label", po::value<std::string>(&universal_label)->default_value(""), program_options_utils::UNIVERSAL_LABEL)  
        ("FilteredLbuild", po::value<uint32_t>(&Lf)->default_value(0), program_options_utils::FILTERED_LBUILD)  
        ("filter_threshold,F", po::value<uint32_t>(&filter_threshold)->default_value(0), "用于拆分已有节点的阈值。")  
        ("label_type", po::value<std::string>(&label_type)->default_value("uint"), program_options_utils::LABEL_TYPE_DESCRIPTION);  

    // 合并描述  
    desc.add(required_configs).add(optional_configs);  
}  

void DiskIndexBuilder::parseCommandLine(int argc, char **argv) {  
    po::variables_map vm;  
    po::store(po::parse_command_line(argc, argv, desc), vm);  
    if (vm.count("help")) {  
        std::cout << desc;  
        exit(0);  
    }  
    po::notify(vm);  
}  

bool DiskIndexBuilder::setMetric() {  
    if (dist_fn == "l2") {  
        metric = diskann::Metric::L2;  
    } else if (dist_fn == "mips") {  
        metric = diskann::Metric::INNER_PRODUCT;  
    } else if (dist_fn == "cosine") {  
        metric = diskann::Metric::COSINE;  
    } else {  
        std::cerr << "错误: 仅支持 l2 和 mips 距离函数" << std::endl;  
        return false;  
    }  
    return true;  
}  

bool DiskIndexBuilder::validateAppendReorderData() {  
    if (append_reorder_data) {  
        if (disk_PQ == 0) {  
            std::cerr << "错误: 当向索引附加重排序数据时，未压缩的数据是没有必要的。" << std::endl;  
            return false;  
        }  
        if (data_type != "float") {  
            std::cerr << "错误: 目前仅支持对 float 数据类型附加重排序数据。" << std::endl;  
            return false;  
        }  
    }  
    return true;  
}  

std::string DiskIndexBuilder::prepareParams() {  
    return std::to_string(R) + " " + std::to_string(L) + " " + std::to_string(B) + " " + std::to_string(M) + " " +  
           std::to_string(num_threads) + " " + std::to_string(disk_PQ) + " " + std::to_string(append_reorder_data) + " " +  
           std::to_string(build_PQ) + " " + std::to_string(QD);  
}  

int DiskIndexBuilder::executeBuild(const std::string& params) {  
    try {  
        if (!label_file.empty() && label_type == "ushort") {  
            if (data_type == "int8")  
                return diskann::build_disk_index<int8_t>(data_path.c_str(), index_path_prefix.c_str(), params.c_str(),  
                                                         metric, use_opq, codebook_prefix, label_file, universal_label, filter_threshold, Lf);  
            else if (data_type == "uint8")  
                return diskann::build_disk_index<uint8_t, uint16_t>(  
                    data_path.c_str(), index_path_prefix.c_str(), params.c_str(), metric, use_opq, codebook_prefix,  
                    label_file, universal_label, filter_threshold, Lf);  
            else if (data_type == "float")  
                return diskann::build_disk_index<float, uint16_t>(  
                    data_path.c_str(), index_path_prefix.c_str(), params.c_str(), metric, use_opq, codebook_prefix,  
                    label_file, universal_label, filter_threshold, Lf);  
            else {  
                std::cerr << "错误: 不支持的数据类型" << std::endl;  
                return -1;  
            }  
        } else {  
            if (data_type == "int8")  
                return diskann::build_disk_index<int8_t>(data_path.c_str(), index_path_prefix.c_str(), params.c_str(),  
                                                         metric, use_opq, codebook_prefix, label_file, universal_label, filter_threshold, Lf);  
            else if (data_type == "uint8")  
                return diskann::build_disk_index<uint8_t>(data_path.c_str(), index_path_prefix.c_str(), params.c_str(),  
                                                          metric, use_opq, codebook_prefix, label_file, universal_label, filter_threshold, Lf);  
            else if (data_type == "float")  
                return diskann::build_disk_index<float>(data_path.c_str(), index_path_prefix.c_str(), params.c_str(),  
                                                        metric, use_opq, codebook_prefix, label_file, universal_label, filter_threshold, Lf);  
            else {  
                std::cerr << "错误: 不支持的数据类型" << std::endl;  
                return -1;  
            }  
        }  
    }  
    catch (const std::exception &e) {  
        std::cerr << "索引构建失败: " << e.what() << std::endl;  
        return -1;  
    }  
}  

} // namespace diskann


3. 创建 CMake 配置文件 (CMakeLists.txt)
这个文件将定义如何编译你的库。

cmake_minimum_required(VERSION 3.10)  
project(DiskIndexBuilderLib)  

# 查找必需的依赖包  
find_package(Boost REQUIRED)  
find_package(OpenMP REQUIRED)  

# 定义库  
add_library(DiskIndexBuilder SHARED DiskIndexBuilder.cpp)  

# 包含目录  
target_include_directories(DiskIndexBuilder PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})  

# 链接 Boost 和 OpenMP （如果需要）  
target_link_libraries(DiskIndexBuilder PUBLIC Boost::boost OpenMP::OpenMP_CXX)

4. 构建库
确保你的系统上安装了 CMake。
创建构建目录并编译库。
mkdir build  
cd build  
cmake ..  
make


5. 在其他项目中使用
你可以在其他项目中通过链接这个库并包含 DiskIndexBuilder.h 来使用它。例如：
#include "DiskIndexBuilder.h"  

int main(int argc, char **argv) {  
    diskann::DiskIndexBuilder builder(argc, argv);  
    int result = builder.buildIndex();  
    return result;  
}

总结
通过以上步骤，你可以将构建磁盘索引的逻辑封装成一个库。其他项目可以通过链接这个库并调用 DiskIndexBuilder 类的方法来实现相应的功能。确保根据你的项目结构正确处理头文件保护和包含目录。这样做将使你的代码更加模块化和可重用。
