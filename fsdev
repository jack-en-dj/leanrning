# CMake的最低版本要求  
cmake_minimum_required(VERSION 3.10)  

# 项目名称  
project(YourLibraryName)  

# 设置C++标准  
set(CMAKE_CXX_STANDARD 11)  
set(CMAKE_CXX_STANDARD_REQUIRED True)  

# 包含头文件目录  
include_directories(include)  

# 查找所有的源文件  
file(GLOB_RECURSE SOURCES "src/*.cpp")  # 获取 src 目录下的所有 .cpp 文件  
file(GLOB_RECURSE HEADERS "include/*.h")  # 获取 include 目录下的所有 .h 文件  

# 添加动态库  
add_library(${PROJECT_NAME} SHARED ${SOURCES})  

# 安装规则（可选）  
install(TARGETS ${PROJECT_NAME}  
    DESTINATION lib  
)  

install(DIRECTORY include/  
    DESTINATION include  
)  

# 如果有额外的链接依赖，可以在这里添加  
# target_link_libraries(${PROJECT_NAME} ...)

命令行中导航到 your_library 项目根目录，执行以下命令以构建库：

mkdir build  
cd build  
cmake ..  
make

5. 安装库（如果需要）
如果您需要安装该库以供其他项目使用，可以执行：make install



在其他项目中使用库
cmake_minimum_required(VERSION 3.10)  

project(NewProject)  

set(CMAKE_CXX_STANDARD 11)  
set(CMAKE_CXX_STANDARD_REQUIRED True)  

# 如果库安装在自定义路径中，可以指定路径  
include_directories(/usr/local/include)  
link_directories(/usr/local/lib)  

add_executable(new_executable src/main.cpp)  # 新项目的源文件  

# 链接库  
target_link_libraries(new_executable YourLibraryName)
