#include <iostream>
#include <memory>
#include <cstring>

void merge_data(const std::unique_ptr<char[]>& demo1, const std::unique_ptr<char[]>& demo2,
                std::unique_ptr<char[]>& demo3, size_t size) {
    // Step 1: 拷贝 demo1 的有效数据到 demo3
    for (size_t i = 0; i < size; ++i) {
        if (demo1[i] != 0) {
            demo3[i] = demo1[i];  // 将 demo1 的有效数据拷贝到 demo3
        }
    }

    // Step 2: 用 demo2 的数据替换 demo3 中的 0 部分
    for (size_t i = 0; i < size; ++i) {
        if (demo3[i] == 0) {
            demo3[i] = demo2[i];  // 如果 demo3 当前位置是 0，则用 demo2 的数据替换
        }
    }
}

int main() {
    // 假设 demo1 和 demo2 的长度一致
    size_t size = 10;

    // 创建 demo1、demo2 并初始化
    auto demo1 = std::make_unique<char[]>(size);
    auto demo2 = std::make_unique<char[]>(size);
    auto demo3 = std::make_unique<char[]>(size);  // 合并后的空间，大小为 size

    std::memset(demo1.get(), 0, size);
    std::memset(demo2.get(), 0, size);
    std::memset(demo3.get(), 0, size);

    // 模拟 demo1 和 demo2 的数据
    std::strncpy(demo1.get(), "abc\0\0def", size); // 包含有效数据 "abcdef"
    std::strncpy(demo2.get(), "123456789", size);  // 数据为 "123456789"

    // 合并 demo1 和 demo2 到 demo3
    merge_data(demo1, demo2, demo3, size);

    // 输出合并后的数据
    std::cout << "Merged Data: ";
    for (size_t i = 0; i < size; ++i) {
        if (demo3[i] == 0) {
            std::cout << "\\0";  // 打印 '\0' 作为可见标记
        } else {
            std::cout << demo3[i];
        }
    }
    std::cout << std::endl;

    return 0;
}
